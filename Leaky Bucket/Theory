Leaky Bucket
Concept:
The Leaky Bucket algorithm processes requests at a constant rate. Excess requests are discarded if the queue (bucket) is full, regardless of the rate at which they arrive.

Advantages:

Smooth Out Traffic: Ensures a consistent rate of request processing.
Simplicity: Straightforward to implement using a queue.
Disadvantages:

Request Loss: Excess requests are discarded, which may not be acceptable in all scenarios.
Limited Flexibility: Doesnâ€™t handle bursts well as requests are dropped if the bucket overflows

+---------------------+
|  Leaky Bucket       |
|   (Capacity: 10)    |
+---------------------+
         |
         v
+---------------------+
|  Add Request to Queue |
+---------------------+
         |
         v
+---------------------+
|  Check Queue Size  |
+---------------------+
         |
         v
+---------------------+
|  Queue Overflow?   |
+---------------------+
         |
         v
  Yes <---------------+
|  Discard Request    |
+---------------------+
         |
         v
+---------------------+    No
|  Process Request    |
|  (Leak Rate: 1/sec)|
+---------------------+
